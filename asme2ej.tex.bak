%%%%%%%%%%%%%%%%%%%%%%%%%%% asme2ej.tex %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Template for producing ASME-format journal articles using LaTeX    %
% Written by   Harry H. Cheng, Professor and Director                %
%              Integration Engineering Laboratory                    %
%              Department of Mechanical and Aeronautical Engineering %
%              University of California                              %
%              Davis, CA 95616                                       %
%              Tel: (530) 752-5020 (office)                          %
%                   (530) 752-1028 (lab)                             %
%              Fax: (530) 752-4158                                   %
%              Email: hhcheng@ucdavis.edu                            %
%              WWW:   http://iel.ucdavis.edu/people/cheng.html       %
%              May 7, 1994                                           %
% Modified: February 16, 2001 by Harry H. Cheng                      %
% Modified: January  01, 2003 by Geoffrey R. Shiflett                %
% Use at your own risk, send complaints to /dev/null                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% use twocolumn and 10pt options with the asme2ej format
\documentclass[twocolumn,10pt,draft]{asme2ej}

\usepackage{graphicx} %% for loading postscript figures
\usepackage{ctable}
\usepackage{multirow}
\usepackage{colortbl}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}


%% The class has several options
%  onecolumn/twocolumn - format for one or two columns per page
%  10pt/11pt/12pt - use 10, 11, or 12 point font
%  oneside/twoside - format for oneside/twosided printing
%  final/draft - format for final/draft copy
%  cleanfoot - take out copyright info in footer leave page number
%  cleanhead - take out the conference banner on the title page
%  titlepage/notitlepage - put in titlepage or leave out titlepage
%  
%% The default is oneside, onecolumn, 10pt, final


\title{An Automatic Switching Approach to Teleoperation of Mobile-Manipulator Systems Using Virtual Fixtures}

%%% first author
\author{M R Wrock
    \affiliation{
	Mechatronic and Robotic Systems Laboratory\\
	Department of Mechanical Engineering\\
	University of Ontario: Institute of Technology\\
	Oshawa, Canada\\
    Email: michael.wrock@uoit.ca
    }	
}

%%% second author
%%% remove the following entry for single author papers
%%% add more entries for additional authors
\author{S B Nokleby \\
    \affiliation{
	Mechatronic and Robotic Systems Laboratory\\
	Department of Mechanical Engineering\\
	University of Ontario: Institute of Technology\\
	Oshawa, Canada\\
    Email: scott.nokleby@uoit.ca
    }
}

\begin{document}

\maketitle    

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{abstract}
{\it This is the abstract.
This article illustrates preparation of ASME paper using 
\LaTeX2\raisebox{-.3ex}{$\epsilon$}.
An abstract for an ASME paper should be less than 150 words and is normally in italics.
%%% 
Please use this template to test how your figures will look on the printed journal page of the Journal of Mechanical Design.  The Journal will no longer publish papers that contain errors in figure resolution.  These usually consist of unreadable or fuzzy text, and pixilation or rasterization of lines.  This template identifies the specifications used by JMD some of which may not be easily duplicated; for example, ASME actually uses Helvetica Condensed Bold, but this is not generally available so for the purpose of this exercise Helvetica is adequate.  However, reproduction of the journal page is not the goal, instead this exercise is to verify the quality of your figures. Notice that this abstract is to be set in 9pt Times Italic, single spaced and right justified.  
}
\end{abstract}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Introduction}

Teleoperation is a process in which an operator controls a robotic system from a remote location. In some cases the robot is in the same room as the operator while in other cases the operator is located in another country or continent and uses a communication protocol like internet connection to achieve teleoperation. Near or far, teleoperation has uses in medical fields, industrial applications, and civil service. There are many benefits of using a teleoperated robot in place of a human being. Robots can be stronger as well as larger than humans, allowing a person to perform tasks that would otherwise be impossible to do alone. They can be used as an assistive device for a disabled person allowing them freedom to perform everyday tasks they would normally require an assistant for. Since robots can be more accurate and precise than a human, they are ideal for delicate manipulation tasks like microsurgery. Through the use of teleoperation, many surgical procedures can be done from remote locations, anywhere in the world. Robots are often used when there is risk to human life such as radioactive or otherwise toxic environments, bomb diffusal, or search and rescue in potentially dangerous settings. With recent advancements in sensing and processing technologies many robots are able to perform tasks autonomously, but robot AI has not reached a point where it can replace a human's reasoning and problem solving ability. For that reason there is a need for robot teleoperation, and with teleoperation comes the requirement for a command strategy. Teleoperation is most commonly employed on Mobile Manipulator Systems (MMS) because it gives the operator the functionality of a fixed manipulator and the mobility of a mobile robot. Most MMS consist of a robotic manipulator that is often in a serial configuration. Since the manipulator mimics both the form and function of a humans arm, the manipulator portion of a MMS is nicknamed the ``arm''. The part of the MMS that allows locomotion is called the ``base'' and is used to reposition the arm by driving (or otherwise moving) to a desired location.\\

The command strategies for teleoperating robots vary in style and implementation as much as the robots themselves do. The simplest command strategy is for the operator to control each degree-of-freedom (DOF) individually. While simple with regards to command strategy, this is probably the most difficult way to operate a MMS as it requires a great deal of training and experience with each type of MMS. One common approach to simplify control is to view it as an optimization problem, where the operator defines a pose or trajectory and either the base, arm, or both parts of the MMS move according to predefined optimization criteria. The optimization approach becomes increasingly complex with additional redundant DOF. A MMS is considered redundant if it has more DOF than is required to perform a given task. If said task simply requires position and orientation, the necessary DOF is six, and therefore if a 6-DOF manipulator is used with a 3-DOF base the MMS has three redundant DOF. When viewed as a redundancy resolution problem there is a great deal of literature discussing how to solve redundancy, since redundancy resolution has been a topic of discussion well before the advent of MMS.\\

Since redundancy resolution is a mature field of research, there are many solutions for redundancy in literature. One example is using additional task constraints so that the system can only find a single configuration for the desired pose (position and orientation). There are many constraints that can be added to a redundant system to minimize the number of solutions to a given motion or pose. A few of these constraints are impedance control; arm/elbow angle control, base positioning, collision avoidance; workspace limits; singularity avoidance; sub-task objectives; configuration control; or multi criteria optimization. Additional task constraints are used to make a robots Jacobian matrix invertible. A Jacobian matrix is a system of equations that will calculate the motion of the end-effector based on the joint velocities of the manipulator. Most often, the operator desires to control the motion of the end-effector and the control system is required to determine the appropriate joint velocities based on the operators commands. To calculate the required joint velocities, the control system must use the inverse of the Jacobian matrix. In the case of a redundant manipulator the Jacobian is not square and requires additional task constraints to be inverted. There are alternatives to additional task constraints to invert a Jacobian matrix such as the Moore-Penrose pseudo-inverse, Shamir and Yomdin's modified Moore-Penrose pseudo-inverse for repeatability, transpose-based solutions, augmented task space, extended Jacobian, and modified forms of the extended Jacobian. Other options for calculating the required joint velocities of a redundant manipulator include using neural networks, fuzzy logic, distributed controllers, and resolved acceleration control. There are many different ways of solving the system of equations of motion, but most have significant drawbacks. Whereas some solutions provide a perfectly acceptable solution on paper, they are not ideal when implemented. The first drawback to realize is the solution may not be singularity robust. When a robot reaches a singularity it loses one or more DOF, leading to lowered manipulability. As well, in some cases as a manipulator approaches a singularity one or more of it's joints velocities may approach impractically high values. Singularities are usually avoided, or at the least solutions are sought in which the command strategy can decide when to use singularities or not. Aside from kinematic singularities the algorithm for solving the equations of motion are prone to singularities as well, which would be unacceptable in an actual implementation. The main reasons the previously mentioned methods of redundancy resolution are not used in controlling MMS is their high computational cost, algorithmic singularities, and limited repeatability.\\

Without using standard redundancy resolution techniques, there are a variety of alternative methods of controlling a MMS. Research has been done to prove the possibility of using neural networks, fuzzy logic, distributed controllers, resolved acceleration control, or virtual impedance walls to control a redundant system like a MMS. Some of these methods utilize the unique properties of a MMS to optimize its performance. For example, a MMS arm is likely to be more accurate and require less power than the base but may be slower and more limited in its workspace. A MMS base may be faster and capable of exerting more force, but is often less accurate and causes more mechanical vibrations. While in many cases one would want to avoid the arm reaching a singularity, a singular position where some of the arm's joints align gives greater strength along that axis and may be desirable under certain conditions. A successful command strategy is required to utilize and exploit each of the MMS subsystems to perform the task in the most efficient and accurate way possible. Since the command strategy presented in this work is designed specifically with a human operator in mind, it must also be as intuitive as possible.\\

In this work, not only is intuitiveness a requirement but ease of operation and learning time are to be optimized as well. In the case of a remotely operated underwater vehicle operators have described the task as stressful and requires a high degree of focus, concentration, and experience. In order to make the teleoperation task easier for the operator, the command strategy proposed herein will require only a single joystick as a user input device. To minimize concentration and experience required, virtual fixtures were used in the command strategy. Virtual fixtures have been shown to decrease training time on MMS, and generally require less concentration. A virtual fixture is a perceptual overlay used on haptic devices to provide additional information or assistance in the form of forces or vibrations. Virtual fixtures are used in modern airplanes to simulate the wind buffeting feeling a pilot would feel in the control stick when approaching a stall in an older plane. There are many forms of virtual fixtures when being used with a manipulator to assist in teleoperation tasks. These virtual fixtures can help avoid collisions by creating a forbidden region, or assist in a precise motion by creating a guidance virtual fixture. These virtual fixtures mimic physical fixtures we use in everyday life, like a ruler (forbidden region) or a card swipe (guidance) and are therefore natural for the operator to interact with.\\

To implement virtual fixtures, a haptic device is required. The word ``haptic'' comes of Greek origins for the word touch. A haptic device is able to convey tactile information, just like a monitor can convey visual information and a speaker can convey auditory information. Being a two-way information device, the output is tactile information in the form of either motions or forces and the converse is read as an input. A haptic device is often in the form of a manipulator, where the operator interacts with the end-effector. The mechanism in which the haptic device operates can be divided in to two categories, impedance and admittance type devices. An impedance device will measure operator motions and display haptic forces. The operator can move the end-effector to whatever position they wish while the device creates forces acting on the end-effector according to whatever program the hardware is running. An admittance type haptic device uses a force/torque sensor to measure the operators applied force on the end-effector and produces motions based on the software program being used. The operator is not able to control the movement of the end-effector, they are only able to apply a force in the direction they wish to move the end-effector. Assuming an impedance device can produce as much force as the operator can exert, and an admittance device can withstand the maximum force an operator can exert without being backdriven, both devices can perform the same task with equal functionality. Depending on the intended use a designer may choose an admittance or an impedance device that is optimal for a specific application, but in general either type of device can be used for most haptic applications. Haptic devices are chosen based on positioning resolution, sampling frequency, workspace size, force capabilities, and power consumption. A haptic device can act in as many as 6-DOF and depending on the type uses 3-DOF for position and 3-DOF for orientation as an input and the 6 outputs represent a force and torque along each axis for an impedance device, or vice-versa for an admittance device. A haptic device can have any subset of the 12 possible inputs and outputs with a minimum of only 1 input and 1 output and a maximum of 6 inputs and 6 outputs.\\

\section{Background}

To develop a new command strategy for controlling a MMS via a haptic input device, a suitable test bed was required. There are three main elements to the required test bed: the base and the arm form the MMS and the haptic joystick is the user input device. In this work, the Omnibot MMS is used with a Novint Falcon haptic joystick.\\

\subsection{Omnibot MMS}

The Omnibot MMS consists of two parts, the arm and the base. The arm is a 3-DOF manipulator made from Schunk's Powercube rotary modules. It is capable of positioning anywhere within the predefined cube-shaped workspace without any singularities. It is mounted on the Omnibot base as shown in Fig. \ref{fig:mounting} so the majority of it's workspace is in front of the base.\\

The base is a omnidirectional vehicle capable of driving in any direction on the surface it sits on, while simultaneously rotating around any axis perpendicular to that plane. It achieves non-holonomic manoeuvring capabilities through the use of Omni-wheels. Four Omni-wheels are located orthogonally on the Omnibot as shown in Fig. \ref{fig:wheels}. Each omni-wheel has a passive and active direction. The passive direction is along the active direction's axis of rotation, meaning it can slide freely perpendicular to the direction it is being driven. By having two wheels in one axis of the robot, and two in a perpendicular axis, omnidirectional motion is achieved through varying the velocities of the 4 wheels on the Omnibot. The omnidirectional motion of the base allows for the command strategy to utilize motions that is not possible for a holonomic MMS. By increasing the manoeuvrability of the MMS, the command strategy for the system can be less restrictive and easier to use by both inexperienced and experienced operators.\\

The Omnibot MMS is fitted with a number of on-board sensor and communication devices. The systems for the Omnibot use Robot Operating System (ROS) to facilitate the operation and communication of the various programs that run on the MMS. ROS is a software framework for robot software development using multiple software \textit{Nodes} that communicate by \textit{Posting} and \textit{Subscribing} to \textit{Topics}. Initially developed at Stanford Artificial Intelligence Library, ongoing development of ROS continues at Willow Garage.\\

The Omnibot localization system used Cricket ultrasonic range finders to locate its position within the robots workspace. There are two Crickets located on the Omnibot, and an array of Crickets located in fixed locations around the workspace. The Crickets mounted on the Omnibot are configured to be beacons while the fixed Crickets are set as listeners. By measuring the time of flight data between the beacons and the listeners the distance between the Crickets are calculated. With a minimum of three distance estimates, a ROS node uses trilateration to estimate the position of the Omnibot-mounted Cricket beacons. By using two Crickets mounted on the Omnibot, the ROS localization node can determine the orientation as well as position of the Omnibot MMS. A example of the beacon-listener layout is shown in Fig. \ref{fig:crickets}.\\

With recent updates to the Omnibot localization system, the Crickets have been replaced with OptiTrack's motion capture system. This is a much needed improvement to the Omnibot since the Crickets suffer from significantly poor accuracy. Using the motion capture system the positional accuracy has been improved from 5-10 cm accuracy to sub-millimeter levels. While the use of a Kalman filter to combine the Cricket and motion capture data would lead to even better accuracy, the motion capture system alone is sufficient for this application and reduces the overall complexity of the localization as well as computational cost.\\

Figure \ref{fig:flowchart} shows an overview of the entire Omnibot MMS. The majority of the computational work is done on the remote desktop. Running ROS, the remote desktop uses five ROS nodes to perform its given tasks. The features of the command strategy are programmed within the Fixtures node, with the four other nodes on the remote desktop facilitating communication with the joystick, motion capture device, Omnibot, and the user (for activating and deactivating the virtual fixtures and datalogging feature. The cameras for the motion capture system connect to the Optitrack computer, which uses Optitrack's Tracking Tools software to track objects within the work cell and broadcast their positions using NATNet protocols. The Mocap node on the remote desktop reads the motion capture broadcast data and publishes the Omnibot MMS pose and target data through ROS to be read by the Fixtures node. The Joystick node uses the Falcon Application Programming Interface (API) to communicate through USB to the Falcon joystick. The Joystick node receives force commands from Fixtures and sends position back. The Datalogger node provides a command line interface to the system, allowing the operator to enable/disable the virtual fixtures as well as record experimental data. The Talker node uses TCP IP socket communication to send movement commands it receives through ROS from the Fixtures node. The Talker node also receives the joint configuration of the manipulator so it can calculate the manipulator's local pose using forward kinematics. The manipulator's pose in local coordinates are received by the Fixtures node through ROS.\\

The on-board computer on the Omnibot MMS is responsible for receiving motion commands from the Talker node on the remote desktop and executing the desired actions. The Powercube rotary modules that form the manipulator arm are controlled via a USB-CAN interface connected to the on-board computer. Using the Powercube API and the manipulator's inverse Jacobian matrix the end-effector velocity is 

\subsection{User Input Device}

The Omnibot can be controlled by the 3-DOF planar joystick shown in Fig. \ref{fig:joystick}. The joystick has two linear DOF that allow the operator to drive in any direction along the plane the Omnibot is on. A rotational DOF allows the operator to twist the joystick in order to command the Omnibot to rotate around its center. With the addition of the manipulator, making the Omnibot in to the Omnibot MMS, a different user input device was required with three linear DOF to control the manipulator. Early versions of the Omnibot MMS required two user input devices for the operator to control both the base and arm of the MMS and the user was required to control them independently.\\

The user input device selected to command the manipulator of the Omnibot MMS is the ``Falcon'' made by Novint Technologies. The Falcon is a cost effective impedance type haptic joystick capable of using 3-Dimensional positioning data as an input and producing forces along those 3-Dimensions as outputs. The positional input has an accuracy of 157 dpcm (400 dpi) across its 10 cm$\times$10 cm$\times$10 cm (4 "$\times$4 "$\times$4 ") workspace. The force displayed is a minimum of 8.9 N (2 lbs) within its workspace. An image of the falcon is shown in Fig. \ref{fig:falcon}. The Falcon also has four buttons located on its end-effector.\\

Since the MMS has full control over four of the end-effectors DOF (X-Y-Z position and orientation around the Z-axis) the command strategy was developed to be used on a 4-DOF haptic joystick, though only three positioning DOF require haptic feedback. The operator must be able to position the MMS end-effector in 3-Dimensions, position the MMS base ``Omnibot'' in two dimensions, and orient the Omnibot in one dimension. While only 3-DOF is required for both positioning and orientation of the MMS base, representing a rotational DOF with a positional DOF would be very confusing to the operator. Since most haptic devices come in 3-DOF or 6-DOF varieties, the Falcon was chosen in part due to it's abilities to simulate an additional DOF using the buttons located on the end-effector. To simulate a rotational DOF, the left and right buttons on the end-effector shown in Fig. \ref{buttons} simulate a counter-clockwise and clockwise rotation respectively. Though the additional DOF only have a unit response, the fixed rotation rate used did not hinder the operators ability to orient the Omnibot MMS as required. In later testing, orientation became less significant as the test-scenario did not require the operator to change orientation of the base.\\

\section{Features of the Command Strategy}

First and foremost, the command strategy uses a single joystick. As shown in \cite{wrock}, two joysticks are more difficult and less efficient than using a single joystick. It was found that operators preferred to use one hand at a time, and when given two joysticks most operators used their dominant hand only, and switched between the two joysticks when required. A single joystick requires less concentration and is less stressful than using two joysticks simultaneously. With only one joystick, the operator is free to use their second hand to perform tasks that will assist them with the MMS task, such as turning pages on a printed manual or using a computer. Using two complete teleoperation systems it is possible for the operator to control two MMS simultaneously.\\

Since the Omnibot MMS uses a localization system, two coordinate frames are available for controlling the Omnibot. Without the localization system, the operator is forced to drive the MMS in the local coordinate frame. The local coordinate frame is fixed to the Omnibot base and moves when the Omnibot moves. Driving the Omnibot in the local coordinate frame is convenient to the operator if they are viewing the teleoperation environment through a camera mounted on the MMS. When driving in the local coordinate frame and the operator pushes the joystick forward, the base will move whichever way it is facing. When controlling the end-effector, pushing the joystick forward will command the arm to move whatever way the base is pointing. In the case of the operator moving the joystick right, the Omnibot MMS will only move in the direction of the operators right side if the base is facing the same was as the operator is. When the base is rotated so that it faces towards the operator, a command towards the operators right will drive the robot towards the operators left (which would be the robot's right). Controlling a MMS using local coordinates without a camera mounted on the base can be very confusing and difficult for the operator. Using the localization system, the command strategy can incorporate the orientation of the Omnibot MMS and allow the operator to control the system in world coordinates. Controlling the Omnibot MMS in world coordinates is much simpler and easier for the operator because they can command either the base or the manipulator to move in a direction relative to their own location. Using world coordinates, the operator can move the joystick to their right, and the MMS base or end-effector will also move to the operator's right regardless of the MMS orientation.\\

While an expert may know intuitively whether they prefer the base or the manipulator to move during the performance of a particular task, a novice operator will not have the insight or experience to determine this beforehand. Aside from being prohibitive to a novice, requiring the operator to manually switch control between the base and manipulator leads to added stress and difficulty. The command strategy presented herein uses an automatic switching method to convert the operators commands to either a motion of the base or the manipulator. Using an automatic switching command strategy is both easier, and more efficient than a manual switching command strategy \cite{wrock}.\\

Virtual fixtures can decrease training time, increase efficiency, and simplify operation of a MMS \cite{wrock}. In this command strategy, virtual fixtures are used for two reasons: to provide additional information about the configuration of the system and to prevent the operator from accidental collisions with the environment. The details of the virtual fixtures used in this command strategy are further discussed in Section [reference next section].\\

\section{Functional Details of the Command Strategy}

Teleoperation, as previously explained is the act of controlling one device using another device at a remote location. The device that the operator interacts with is often called the master. The robot being controlled is then referred to as the slave. The master-slave relationship implies that the slave is to perform whatever commands the master makes. A simple example of a master-slave system is that of a computer mouse. The operator moves the mouse in a desired direction and the pointer on screen does the same action. While a mouse pointer is not a physical device, it illustrates the relationship between a master and slave well. In this example, the system is not backdriveable meaning that when the pointer reaches the edge of the screen, the operator can still move the mouse in that direction. A backdriveable system would stop the operator from moving the master when the slave cannot move.\\

In an attempt to develop a novel command strategy that is simple, intuitive, and efficient several design choices were made to achieve the desired functionality. The first choice was made when choosing either velocity control, positional control, or a hybrid position-velocity control. Position control allows the operator to move the master while the slave performs the exact same motions, such as the computer mouse example above. This style of control has a high level of accuracy but a very limited workspace when used with fixed workspace masters like a haptic device. In the case of the Omnibot MMS, the slave manipulator's workspace would be limited to the size of the masters workspace, a mere 10 cm$\times$10 cm$\times$10 cm. To expand the slave's workspace the motions of the master can be scaled up, but as one can imagine with a highly sensitive mouse positional accuracy will deteriorate as the scaling factor increases. When using scaled position control, the slave manipulator still has a fixed workspace no matter what scaling is used. Since most MMS can relocate anywhere in their environment, a fixed size workspace would be too limiting to use in the command strategy. Velocity control does not have the limits of position control, and the slave manipulator or MMS can travel indefinitely in any direction it is capable of moving. In velocity control, the position of the master relative to its workspace center translates to a velocity vector used by the slave, similar to the way some scroll functions work on computer mice. The further master's end-effector is displaced from its center, the faster the slave moves in the direction the master is displaced. Velocity control is often implemented with the use of a "dead-band". The dead-band is a small area within the center of the master's workspace that does not generate any velocity commands to the slave. When the operator moves the master out of the dead-band, the velocity vector is calculated based on the displacement from the edge of the dead-band rather than from the center of the workspace. The dead-band is used to assist the operator in achieving zero motion in the slave manipulator, and without it even a slight displacement from the center of the master's workspace will generate motion in the slave. Without the dead-band it can be very difficult to perform fine motions with the slave manipulator. As shown in \cite{fark} a hybrid position-velocity command strategy can be used to control mobile robots and manipulators but research shown in \cite{wrock} demonstrates that a hybrid command strategy works best when the objects that the manipulator is interacting with are already known and the command strategy can switch between position and velocity control based on the proximity to the object. Based on previous research the decision to use velocity control exclusively was made.\\

As stated in Section \ref{sec:theothersection}, if the user input device has less DOF than the MMS some form of redundancy resolution is required. In this research, an automatic switching command strategy was chosen to resolve redundancy. The operator will only control up to 4-DOF at any given time, which is the maximum number of DOF the haptic joystick can control. For the command strategy to be simple it must automatically switch the operator's control between the manipulator and base in an intuitive fashion.\\


////////////Maybe remove?/////////////
There are two categories of haptic feedback discussed in the section, virtual fixtures and operation forces. The virtual fixtures are used to assist the operator in specific tasks, and are used differently in different applications. Operation forces are forces felt in the haptic device under normal operation, and are fundamental to the operation of the Omnibot MMS. While the virtual fixtures are optional, the operation forces are an integral part of the command strategy and always used.\\

\subsection{Virtual Fixtures}

The virtual fixtures used in these experiments can be divided in to two categories, operational forces and guidance forces. The operational forces are crucial to the general operation of the system and are always used when operating the robot. The guidance forces are the virtual fixtures that are used to improve operator performance and can be optional. When comparing the effectiveness of virtual fixtures, the operational forces are always present and the guidance forces are optionally suppressed.\\

\subsubsection{Operational Forces}

The most necessary operational force is the centering force. This force will always guide the operator towards the dead-band. Without the centering force the operator will have great difficulty in determining where to move the joystick to produce the desired motion and even more difficulty to stop the robot's motion entirely. A second operational force is used to alert the operator when the manipulator is approaching the edge of its workspace. This force is felt the same way forbidden region virtual fixtures are felt. It takes the form of six walls forming a cube that defines the manipulators allowable workspace. They are absolute and frictionless virtual fixtures, two properties that are explained in the next section. Using forbidden region virtual fixtures to form a safe workspace for the manipulator not only prevents accidental collisions with the manipulator or the base, but also provides sensory feedback to the operator when approaching the workspace limit warning them the control mode is about to change.\\

\subsubsection{Guidance Forces}

In this command strategy all the guidance forces take the form of forbidden region virtual fixtures. These fixtures act much like walls in the sense that the robot cannot pass through them. They are often placed along a wall to prevent just that. The virtual fixtures have a number of properties that define its location and behaviour. Using an XYZ location the center of the fixture is defined. From that center, three unit vectors define the orientation of the fixtures around the XYZ axes. A limit along each unit vector is used to define the size of the virtual wall.\\

To define the nature of the wall, whether the force should be attractive or repellent, a direction of force is defined along with a maximum magnitude. The thickness of the region in which the operator feels force when approaching the wall is defined as well. The attractive or repulsive force begins at zero when the robot is more that the defines thickness distance away from the wall. The force increases linearly as the robot nears the wall, reaching the defined maximum magnitude when touching the wall.\\

At the point in which the robot touches a forbidden region virtual fixture, two properties are use to determine the behaviour of the robot. If the fixture is absolute, the robot will not drive through the virtual wall. If not, the operator will feel the maximum force defined but still be able to continue to drive through the wall. If the fixture is not absolute, a secondary thickness must be defined to declare how far through the wall the operator will continue to feel force. If the fixture is absolute, the robot cannot drive through the wall but may be able to drive along the wall. This property is defined by the friction component. Currently, the friction property is either on or off. With the friction value set, the virtual wall acts like a surface with infinite friction, when the robot is touching the wall the only motions it can make are away from the wall. With the friction property off, the wall acts like a frictionless surface allowing the robot to move along a wall while touching it, but not through it.\\

Other properties of the virtual fixtures define whether the fixtures are felt when the operator is driving the manipulator, mobile base, or both. As well, the coordinate frame of the fixture can be defined as local or world coordinates. In the case of the virtual walls used to guide the robot away from actual walls, word coordinates is used. When operating the manipulator, the virtual walls surrounding its workspace are defined in local coordinates so the forces are always felt relative to the manipulator's pose regardless of the Omnibot's position or orientation within the test area.\\

\subsection{Location-based control}

The location-based control implemented is a way of changing the robot command strategy based on its location relative to a point of interest. In this work, the points of interest are affixed with unique markings which the motion capture system can recognize and track. The three states of control are named transportation mode, near-target manipulation mode, and off-target manipulation mode. To test the effectiveness of the command strategy, the points of interest are marked and tracked. In future work, additional sensors will be added to the Omnibot MMS to allow it to define the points of interest dynamically. If there are no points of interest for a specific application, an operator can choose to use either the near-target or off-target mode exclusively when controlling the manipulator. Transportation mode will function as normal whether the points of interest are predefined, dynamically defined, or not used.\\

\subsubsection{Transportation Mode}

The transportation mode of the command strategy is used when the operator is driving the base of the MMS. The operator controls the robot using the haptic joystick in world coordinates using velocity control. The operator can drive the Omnibot backward, forwards, left, right, or any combination of those directions by moving the user input device in the direction they want the robot to travel. Since the operator controls the MMS in world coordinates the Omnibot will always move relative to the operator's fixed location regardless of its orientation. To rotate the Omnibot, the operator uses the buttons located on the Falcon's end-effector. The operator can move the joystick up and down, but it will have no effect on the Omnibot base motion. In transportation mode, the dead-band is a cylinder that passes through the master's workspace center and is oriented parallel to the Z axis instead of a sphere centered in the workspace. The velocity of the Omnibot is represented by Equation \ref{eq:transvel}.\\

When driving the MMS in transportation mode the operator experiences both operation forces and virtual fixtures. The operation forces are to help the operator return the master to the dead-band. When the joystick's end-effector is displaced from the dead-band a centering force is displayed to guide the end-effector back in to the dead-band. The centering force increases the further from away the dead-band the end-effector gets, and is represented by Equation \ref{eq:centering}. Using the magnitude of the centering force, the operator can estimate the velocity of the robot without requiring visual or auditory feedback.\\

/////////The centering force it twofold in //use// it not only assits the operator in controlling the robot, but it can provide a secondary channel of information to the operator about the robot. In this case the relationship between the centering force and the robot's velocity is linear so with experience the operator is able to estimate the robot's speed not only through a visual cue but tactile as well.

The second type of haptic information displayed on the haptic master during transportation mode is a forbidden-region virtual fixture. It is used to prevent the operator from colliding with walls or obstacles in its environment. When the operator is within a certain range of an obstacle, they will feel a repelling force when attempting to drive in to the obstacle. The force of the virtual fixture is represented by Equation \ref{eq:wall} where $X$ is the distance from the robot to the obstacle, and $Y$ is the displacement from the dead-band in the direction towards the obstacle. To further enforce the collision prevention, once the robot is within the maximum allowable proximity to the obstacle it will no longer drive towards it and ignore any operator commands to do so.\\

\subsubsection{Off-Target Manipulation Mode}

The system enters off-target manipulation mode when more than $D$ distance away from a point of interest. In this manipulation mode the operator controls the velocity of the slave manipulator's end-effector using the master's end-effector similar to the way the base is controlled in transportation mode. Motion is defined using Equation \ref{eq:manip} where $X,Y,Z$ represent the displacement of the master end-effector from the dead-band and $V_x,V_y,V_z$ are the $x,y,z$ components of the slave manipulator's end-effector velocity. $S_f$ is used as a scaling factor to increase or decrease the maximum velocity of the manipulator.\\

When controlling the manipulator in off-target manipulation mode the operator will feel two distinct operating forces. The same centering force used in transportation mode is felt during off-target manipulation mode and is felt for any configuration of the manipulator. The centering force will guide the operator's joystick towards the spherical dead-band. When the joystick is within it's dead-band, the manipulator does not move. The centering force only centers the joystick, not the manipulator. A second force called the virtual wall is a configuration dependant force only felt in certain positions. The virtual wall exists as a virtual construct that can only be interacted with through the haptic device. Six virtual walls exists within the workspace of the Omnibot MMS manipulator arm and form a cube represented in Figure \ref{fig:vwalls}. The location of these walls are chosen such that they enclose a workspace for the manipulator that exists entirely in front of the Omnibot MMS, and no manipulator singularities occur within them. The walls are given a thickness $T$ and the allowable workspace of the manipulator extends to the outside edge of the virtual walls. When the end-effector of the manipulator is within the inside edge of the walls no forces additional to the centering force are felt. Once the operator drives the end-effector through the inside edge of the virtual wall they begin to feel the repulsive force of the wall. The virtual wall's repulsive force has the same direction as the centering force, but larger magnitude and is defined in Equation \ref{eq:vwall}. The repulsive force increases in magnitude until it reaches its maximum value at the outer edge of the virtual wall.\\

When the manipulator's end-effector reaches the outside edge of the virtual wall, and the operator commands the end-effector to continue moving in a direction outside the the wall the system switches from off-target manipulation mode to transportation mode. The purpose of the virtual wall thickness is to give the operator advance notice they are about to switch modes and the opportunity to avoid it. When the system enters transportation mode, it will remain in that mode until one of three events occur: a time out, a press of the mode selector button, or the system enters a near-target manipulation mode area. The time out occurs after $t$ seconds of inactivity, indicating that the operator has positioned the base at the desired location and is ready to begin manipulation using the robot arm. If the operator does not wait for the time out and presses the the mode selector button, the system returns to off-target manipulation mode immediately. When the system enters a near-target manipulation mode region it automatically switches to near-target manipulation mode.\\

When the system switches from off-target manipulation mode to transportation mode, the manipulator retracts from the point where it breached the outer edge of the virtual wall to a predefined optimal location. The optimal location is illustrated in Figure \ref{fig:optimalloc} and was chosen so that the majority of the manipulators useable workspace was in front of the end-effector, while there was still some room for it to move backwards. Through experimentation, this point was found to be three quarters of the distance from the front wall to the back wall, measured from the front wall.\\

\subsubsection{Near-Target Manipulation Mode}

The system enters near-target manipulation mode when the MMS base is within a near-target manipulation mode region. These regions are circular areas centered around specific points of interest with their radius equal to 80\% the distance from the end-effector to the inside edge of the virtual wall. With the near-target region defined as such, the system will enter near-target manipulation mode only when sufficiently close to the point of interest that the manipulator can interact with it without the base having to move.\\

When controlling the manipulator the operator uses the same technique as in off-target manipulation mode. The centering force, virtual wall, and virtual wall forces are all identical. The difference between the two manipulation modes is noticed when the manipulator's end-effector reaches the outside edge of the virtual wall. Instead of switching to transportation mode, the system remains in near-target manipulation mode but the operator is able to drive the base. This allows for easy repositioning of the base if the operator is attempting to interact with an object outside the virtual walls, and requires a small movement in the base positioning.\\

When the end-effector reaches the outer limit of the virtual wall and the joystick is not within the dead-band the base will move according to the transportation mode scheme, but the manipulator's end-effector will remain at its location on the edge of the virtual wall. The operator will continue to feel the centering force and virtual wall force while driving the Omnibot base. As long as the operator commands the manipulator to move outside the virtual wall while its at the edge, the base will move. If at any time the operator commands the end-effector away from the edge of the virtual wall, even while driving the base, the MMS base will cease movement and the manipulator will move. The system will only enter this pseudo-transportation mode while the end-effector is at the virtual wall's outer edge and the haptic joystick is outside the dead-band in the direction of the virtual wall and will only remain in that mode while these conditions are met. When the operator moves the master to the dead-band or out of the dead-band in the direction opposite to the virtual wall the system returns to near-target manipulation mode.\\

If the operator intends to switch to transportation mode, they will have to use near-target manipulation mode to drive the Omnibot base outside the near-target manipulation mode region. Outside the near-target region the system enters off-target manipulation mode. At the instant the MMS leaves the region, the state of the system is such that the end-effector is at the outside limit of the virtual wall, and the haptic master is outside the dead-band in the direction of the virtual wall. In this state during off-target manipulation mode the end-effector retracts to its optimal position and the MMS enters and remains in transportation mode. To the operator, as the MMS drives out of a near-target region they will notice the arm retract to its optimal position as the system switches from pseudo-transportation mode to the regular transportation mode. During the mode switch the operator is not required to adjust their actions, it occurs entirely autonomously and the operator need only focus on driving the base of the Omnibot MMS.\\

\section{Experimentation Using the Command Strategy}

To test the effectiveness of the command strategy a typical pick-and-place scenario was designed. This scenario requires the operator to utilize the features of the command strategy, while minimizing the effect of some of the Omnibot MMS downfalls. Two of these downfalls is the lack of a gripper tool on the end-effector, and the simulated rotational DOF for the Omnibot base. To overcome the downfalls, the pick and place task is simulated using the targets shown in Figure \ref{fig:targets}. The targets can be knocked over using the end-effector of the manipulator. This action requires the operator to perform very similar motions to a pick and place task, and tests their ability to accurately control the manipulator in small motions. There are two pick and place actions to be completed in the first evaluation scenario, and driving between the two tests the operators ability to accurately control the MMS base. Since the base only rotates at a fixed rate, the two pick and place stations are oriented the same way so the operator does not need to rotate the Omnibot when completing the test scenario. Though no change in orientation is required, the operators skill in driving the Omnibot is still adequately tested as they navigate through the experiment set-up.\\

\subsection{Experiment Set-Up}

The first experiment set-up is shown in Figure \ref{fig:setup}. In the test scenario, the operator is required to begin with the Omnibot MMS located at its start location show in Figure \ref{fig:setup}. From the start location the operator must drive the MMS to the first pick and place area. At the first area they simulate the pick and place task by knocking over the two targets. Upon completion of the task the operator must navigate around the dividing wall to the second pick and place area and perform the second pick and place task by knocking over the two targets at that location. After the final task is completed, the operator must drive the robot back to its start position to complete the scenario.\\

To compare the novel command strategy with an existing one, the operators are required to alternate between completing the scenario using the old command strategy, followed by the new one. The old command strategy requires the operator to use two joysticks, one joystick controls the Omnibot base, and the second joystick controls the MMS arm. When using the new command strategy, only a single joystick is used along with the virtual fixtures and operation forces. There are no virtual fixtures in the old command strategy, and the only operation forces felt are the centering forces. The virtual wall still exists but is not felt, and when the end-effector reaches the virtual wall it simply stops moving.\\

\subsection{Experimental Results}

Four novice users were chosen to evaluate the command strategy, and one expert user. The novice users had no previous experience with the Omnibot MMS of the command strategy. The expert user had a significant amount of experience with the Omnibot MMS and both the new and old command strategy.\\

\begin{table}[htbp]
\noindent\makebox[\columnwidth]{
\resizebox{\columnwidth}{!}{
\begin{tabular}{|r|r|r|r|r|r|r|r|r|r|}
\hline
           &       & Completion Time & Omnibot Travel & Omnibot Time & Omnibot Speed & Arm Travel & Arm Time & Arm Speed \\
     \hline
 \multirow{2}{*}{User 1} & Single Joystick & 106.6862 & 15.91776472 & 43.7414 & 0.363906156 & 3.710634828 & 62.9448 & 0.058950617 \\ \cline{2-9}
           & Two Joystick & 91.3060 & 18.29274056 & 36.3346 & 0.503452372 & 1.744979334 & 54.9714 & 0.031743404 \\ \hline
 \multirow{2}{*}{User 2} & Single Joystick & 84.7882 & 19.36612455 & 51.4970 & 0.376063160 & 3.224912326 & 33.2912 & 0.096869813 \\ \cline{2-9}
           & Two Joystick & 107.6336 & 18.82309118 & 26.3456 & 0.714468115 & 1.122427339 & 81.2880 & 0.013808032 \\ \hline
 \multirow{2}{*}{User 3} & Single Joystick & 101.1060 & 17.21428196 & 53.2922 & 0.323016913 & 4.134907328 & 47.8138 & 0.086479371 \\ \cline{2-9}
           & Two Joystick & 86.6674 & 17.33798524 & 34.0082 & 0.509817786 & 1.736519975 & 52.6592 & 0.032976573 \\ \hline
 \multirow{2}{*}{User 4} & Single Joystick & 86.2376 & 16.03027247 & 42.8344 & 0.374238287 & 3.738629469 & 43.4032 & 0.086137185 \\ \cline{2-9}
           & Two Joystick & 101.8025 & 18.91776663 & 41.1569 & 0.459650313 & 1.469540643 & 60.6456 & 0.024231612 \\ \hline
 \multirow{2}{*}{User 5 (Expert)} & Single Joystick & 58.8234 & 15.17610531 & 34.7482 & 0.436745078 & 2.032595467 & 24.0752 & 0.084426940 \\ \cline{2-9}
           & Two Joystick & 106.4678 & 19.63746817 & 60.7904 & 0.323035679 & 1.541215258 & 45.6774 & 0.033741309 \\ \hline
\end{tabular}
}
}
\caption{Averaged Results from Testing}
\label{tab:results}
\end{table}

Table \ref{tab:results} show the averaged results from the experiment scenarios comparing the old two joystick command strategy with the new single joystick command strategy presented in this work. There are seven criteria in which the command strategies were compared. ``Completion Time'' is the total amount of time it took the operator to complete the task, starting from when the Omnibot MMS leaves its start location and ending when the operator returns the MMS to the start point, measured in seconds. This is the main criteria in measuring efficiency because most operators are referring the total time spent using the MMS when evaluating efficiency. Additional statistics from the test runs can also be used to measure efficiency, such as ``Omnibot Travel'' and ``Arm Travel'' in which the total distance travelled by the Omnibot base and manipulator arm is measured in meters. ``Omnibot Time'' and ``Arm Time'' refer to the total time spent controlling either the base or the arm respectively, and is measured in seconds. Using the distance travelled and the time spent controlling the subsystems of the MMS, the average speed the operator controlled that subsystem is calculated.\\

When looking purely at the completion time some novices demonstrated more efficiency with the single joystick method but the experienced user was able to perform the task much more efficiently using a single joystick. With the results presented in Section \ref{sec:lcurve}, one would assume that the novices skill using the new command strategy will continue to increase and reach a level equal to the expert operator, while their skill with two joysticks has already reached its maximum potential.\\

Other aspects of efficiency can be measured as well, such as accuracy and power consumption. The Omnibot base consumes more power than the manipulator, and therefore it is more efficient with respect to power consumption to minimize the total distance travelled by the base. Using the new command strategy, all but one user was able to consume less power during the task. The total distance travelled by the base also indicates the operators were able to navigate the environment with greater accuracy using the single joystick command strategy.\\

When analyzing the results related to the manipulator, one fault in the data recording mechanism must be discussed. Since the data recorder will log any motion of the arm, it continued to record the manipulator data while the end-effector was retracting from the edge of the virtual wall to its optimal location. Because of this, the total distance travelled by the arm using the single joystick was much larger, not only because the operator had to move the end-effector from its start location to the virtual wall's edge to switch to transportation mode, but because the data recorder was also running while the arm was retracting as well. For this reason, the ``Arm Travel'' column of results is not an accurate representation of the command strategy. The arm time and arm speed however show that the operator felt more comfortable controlling the manipulator using the single joystick command strategy. This is evident because the majority of the users spent less time moving the manipulator, meaning they were able to perform the pick and place task quicker. Though the data recording issue also affects the ``Arm Speed'' entries in the results, based on the arm time it is still likely that the operators drove the manipulator at greater speeds using the new command strategy which would suggest the operators felt more comfortable running the manipulator at higher speeds while using that command strategy.\\

When asked which command strategy each operator preferred, they all agreed the single joystick command strategy was easier and more intuitive to use. It was noted that even though the operators were allowed to use both hands when using both joysticks, they still only used one joystick at a time because it was ``difficult'' and ``stressful'' to attempt to control both manipulator and base simultaneously.\\

The one complaint the novice operators had against the single joystick command strategy was about the virtual fixtures. While they did prevent the Omnibot MMS from colliding with any walls (represented as taped markings on the floor) the system would often assume the MMS was closer to a wall than it actually was, making it difficult for the operator to navigate through a narrow passage. The reason for this type of error is due to the accuracy of the localization system, where it would incorrectly estimate the current position of the MMS. While the operator may still have room to drive in the direction they command without a collision, the localization system would assume there was no room to drive in that direction, and the forbidden region virtual fixture would prevent motion. Operators would occasionally get the MMS temporarily ``stuck'' when driving close to a wall, and increase the overall average completion time for the single joystick command strategy making it less efficient than it would be under ideal conditions. Since the forbidden region virtual fixtures were not present in the two joystick command strategy, its average completion time was not affected.\\

\subsubsection{Learning Curve}
\label{sec:lcurve}

The experimental data from the novice users was used to estimate a learning curve. This was done by plotting each operators completion time for both command strategies and creating a linear learning curve based on the results. As shown in Figures \ref{fig:user1,fig:user2,fig:user3,fig:user4}///////make this one figure//////, most of the users' learning curves were steeper with the single joystick command strategy. From the graphs, one can assume that the novice users will continue to improve with the single joystick command strategy faster than the two joystick command strategy, until they reach a disparity between the two similar to that of the expert user.\\

//////////////Refining the command strategy//////

After the first round of testing, the command strategy was refined and improved. Since it was shown that the operators were more effective when using  single joystick, it now became important to determine the effectiveness of the virtual fixtures. Three important changes were made to the system affecting the accuracy, control, and functionality.

//Accuracy

The accuracy of the system was greatly improved between the first and second rounds of testing. The ultrasonic localization system based on Crickets was replace with Optitrack's motion capture system. This change improved the Omnibot MMS position estimates by two orders of magnitude, from 5-10 cm accuracy to less than a millimeter. Since the accuracy became much more accurate, virtual fixtures based around the pick and place targets themselves were now possible.\\

//Control

The command strategy was altered as well. In the first round of testing, a near-target manipulation mode and off-target manipulation mode was used. While off-target manipulation mode is useful when the operator expects the targets of interest not to be stationary, it is not useful in a scenario where the targets are fixed. For the second round of testing, off-target manipulation mode was removed having the system enter transportation mode any time it is sufficiently far away from a point of interest.\\

//Functionality

The functionality of some virtual fixtures was changed as well. The friction aspect of the forbidden region virtual fixtures was removed, allowing the users to slide along a wall, rather than stop whenever they touch one. The frictionless virtual fixtures will still prevent any motion towards a wall when at its limit, but will allow motion parallel to the wall.\\

//Experiment two

With the above changes implemented, a second experimental setup was created to test the effectiveness of the virtual fixtures using the refined command strategy. The robot environment was set up as shown in Fig. \ref{fig:exp2}, with a single point of interest. Similar to the first experiment, the operator is required to start at the location shown, navigate to the point of interest, perform a manipulation task, and return to their starting point. The same testing methodology as before was used where the operator performed one run without using virtual fixtures, followed by a run using the virtual fixtures. Ten operators were used in the testing of the command strategy and the results can be seen in Table \ref{tab:results2}.\\

\section{Conclusions}










































\end{document}
